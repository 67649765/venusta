name: VenusTA CI

on:
  push:
    branches: [ main ]
    paths:
      - 'services/**'
      - '.github/workflows/ci.yml'
  pull_request:
    paths:
      - 'services/**'
      - '.github/workflows/ci.yml'

jobs:
  smoke:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure Docker is available
        shell: ${{ matrix.os == 'windows-latest' ? 'pwsh' : 'bash' }}
        run: ${{ matrix.os == 'windows-latest' 
          ? 'Get-Service *docker* | Select-Object Status, Name; Start-Service com.docker.service -ErrorAction SilentlyContinue; docker version' 
          : 'docker --version && docker compose version' }}

      - name: Prepare env
        working-directory: services
        shell: ${{ matrix.os == 'windows-latest' ? 'pwsh' : 'bash' }}
        run: ${{ matrix.os == 'windows-latest' 
          ? 'Copy-Item .env.example .env -Force' 
          : 'cp .env.example .env' }}

      - name: CI env guard (disable external LLM)
        working-directory: services
        shell: ${{ matrix.os == 'windows-latest' ? 'pwsh' : 'bash' }}
        run: ${{ matrix.os == 'windows-latest'
          ? 'Add-Content -Path .env -Value "MOCK_LLM=true"' 
          : 'echo "MOCK_LLM=true" >> .env' }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install CLI deps
        working-directory: services
        shell: ${{ matrix.os == 'windows-latest' ? 'pwsh' : 'bash' }}
        run: ${{ matrix.os == 'windows-latest' 
          ? 'python -m pip install --upgrade pip; pip install requests pytest'
          : 'python -m pip install --upgrade pip && pip install requests pytest' }}

      - name: Build & up
        working-directory: services
        shell: ${{ matrix.os == 'windows-latest' ? 'pwsh' : 'bash' }}
        run: docker compose up -d --build

      - name: Show container status
        working-directory: services
        shell: ${{ matrix.os == 'windows-latest' ? 'pwsh' : 'bash' }}
        run: docker compose ps

      - name: Prepare logs dir (always)
        if: always()
        working-directory: services
        shell: ${{ matrix.os == 'windows-latest' ? 'pwsh' : 'bash' }}
        run: ${{ matrix.os == 'windows-latest' 
          ? 'New-Item -ItemType Directory -Force -Path logs | Out-Null'
          : 'mkdir -p logs' }}

      - name: Wait for API healthy
        working-directory: services
        shell: ${{ matrix.os == 'windows-latest' ? 'pwsh' : 'bash' }}
        run: ${{ matrix.os == 'windows-latest' 
          ? '$ok=$false; for ($i=1; $i -le 30; $i++) { try { $r=Invoke-WebRequest -Uri "http://localhost:8000/health" -UseBasicParsing -TimeoutSec 3; if ($r.StatusCode -eq 200) { $ok=$true; break } } catch {}; Start-Sleep -Seconds 3 }; if (-not $ok) { Write-Error "API not ready in time"; exit 1 }'
          : 'for i in {1..30}; do if curl -sf http://localhost:8000/health >/dev/null; then echo "API is up"; exit 0; fi; echo "waiting api... ($i)"; sleep 3; done; echo "API not ready in time" && exit 1' }}

      - name: Prepare reports dir
        working-directory: services
        shell: ${{ matrix.os == 'windows-latest' ? 'pwsh' : 'bash' }}
        run: ${{ matrix.os == 'windows-latest' 
          ? 'New-Item -ItemType Directory -Force -Path reports | Out-Null'
          : 'mkdir -p reports' }}

      - name: Run pytest with report
        working-directory: services
        shell: ${{ matrix.os == 'windows-latest' ? 'pwsh' : 'bash' }}
        run: pytest -q api/app/tests/test_smoke.py --junitxml=reports/junit.xml

      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-${{ matrix.os }}
          path: services/reports/junit.xml

      - name: Run full loop (host)
        working-directory: services
        shell: ${{ matrix.os == 'windows-latest' ? 'pwsh' : 'bash' }}
        run: ${{ matrix.os == 'windows-latest' 
          ? '.\tools\full_loop.ps1'
          : 'python tools/ci_smoke_test.py' }}

      - name: Dump individual service logs on failure
        if: failure()
        working-directory: services
        shell: ${{ matrix.os == 'windows-latest' ? 'pwsh' : 'bash' }}
        run: ${{ matrix.os == 'windows-latest' 
          ? 'docker compose logs db | Out-File logs/db.log; docker compose logs api | Out-File logs/api.log; docker compose logs frontend | Out-File logs/frontend.log; docker compose logs --no-color | Out-File logs/compose.log'
          : 'docker compose logs db > logs/db.log || true; docker compose logs api > logs/api.log || true; docker compose logs frontend > logs/frontend.log || true; docker compose logs --no-color > logs/compose.log || true' }}

      - name: Upload logs artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: docker-logs-${{ matrix.os }}
          path: services/logs/